--# selene: allow(unused_variable)
---@diagnostic disable: unused-local

-- string	(default "extend")
-- 			global
-- 	Sets the model to use for the mouse.  The name mostly specifies what
-- 	the right mouse button is used for:
-- 	   extend	Right mouse button extends a selection.  This works
-- 			like in an xterm.
-- 	   popup	Right mouse button pops up a menu.  The shifted left
-- 			mouse button extends a selection.  This works like
-- 			with Microsoft Windows.
-- 	   popup_setpos Like "popup", but the cursor will be moved to the
-- 			position where the mouse was clicked, and thus the
-- 			selected operation will act upon the clicked object.
-- 			If clicking inside a selection, that selection will
-- 			be acted upon, i.e. no cursor move.  This implies of
-- 			course, that right clicking outside a selection will
-- 			end Visual mode.
-- 	Overview of what button does what for each model:
-- 	mouse		    extend		popup(_setpos) ~
-- 	left click	    place cursor	place cursor
-- 	left drag	    start selection	start selection
-- 	shift-left	    search word		extend selection
-- 	right click	    extend selection	popup menu (place cursor)
-- 	right drag	    extend selection	-
-- 	middle click	    paste		paste
vim.o.mousemodel = "extend"
-- string	(default "i:beam,r:beam,s:updown,sd:cross,
-- 					m:no,ml:up-arrow,v:rightup-arrow")
-- 			global
-- 	This option tells Vim what the mouse pointer should look like in
-- 	different modes.  The option is a comma separated list of parts, much
-- 	like used for 'guicursor'.  Each part consist of a mode/location-list
-- 	and an argument-list:
-- 		mode-list:shape,mode-list:shape,..
-- 	The mode-list is a dash separated list of these modes/locations:
-- 			In a normal window: ~
-- 		n	Normal mode
-- 		v	Visual mode
-- 		ve	Visual mode with 'selection' "exclusive" (same as 'v',
-- 			if not specified)
-- 		o	Operator-pending mode
-- 		i	Insert mode
-- 		r	Replace mode
vim.o.mouseshape = ""
-- number	(default 500)
-- 			global
-- 	Defines the maximum time in msec between two mouse clicks for the
-- 	second click to be recognized as a multi click.
vim.o.mousetime = "500"
-- number	(default 80 or terminal width)
-- 			global
-- 	Number of columns of the screen.  Normally this is set by the terminal
-- 	initialization and does not have to be set by hand.
-- 	When Vim is running in the GUI or in a resizable window, setting this
-- 	option will cause the window size to be changed.  When you only want
-- 	to use the size for the GUI, put the command in your |ginit.vim| file.
-- 	When you set this option and Vim is unable to change the physical
-- 	number of columns of the display, the display may be messed up.  For
-- 	the GUI it is always possible and Vim limits the number of columns to
-- 	what fits on the screen.  You can use this command to get the widest
-- 	window possible: >
-- 		:set columns=9999
-- <	Minimum value is 12, maximum value is 10000.
vim.o.columns = "80"
-- string	(default "")
-- 			global or local to buffer |global-local|
-- 	List of file names, separated by commas, that are used to lookup words
-- 	for keyword completion commands |i_CTRL-X_CTRL-K|.  Each file should
-- 	contain a list of words.  This can be one word per line, or several
-- 	words per line, separated by non-keyword characters (white space is
-- 	preferred).  Maximum line length is 510 bytes.
vim.o.dictionary = ""
-- boolean	(default off)
-- 			global
-- 	Makes the 'g' and 'c' flags of the ":substitute" command to be
-- 	toggled each time the flag is given.  See |complex-change|.  See
-- 	also 'gdefault' option.
-- 	Switching this option on may break plugins!
vim.o.edcompatible = "false"
-- boolean	(default off)
-- 			global
-- 			{only for Windows}
-- 	Enable reading and writing from devices.  This may get Vim stuck on a
-- 	device that can be opened but doesn't actually do the I/O.  Therefore
-- 	it is off by default.
-- 	Note that on Windows editing "aux.h", "lpt1.txt" and the like also
-- 	result in editing a device.
vim.o.opendevice = "false"
-- string	(default: empty)
-- 			global
-- 	This option specifies a function to be called by the |g@| operator.
-- 	See |:map-operator| for more info and an example.
vim.o.operatorfunc = ""
-- string	(default: see 'runtimepath')
-- 	Directories used to find packages.  See |packages|.
vim.o.packpath = "/home/wongxy/.config/nvim,/etc/xdg/nvim,/home/wongxy/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/home/wongxy/neovim/share/nvim/runtime,/home/wongxy/neovim/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/home/wongxy/.local/share/nvim/site/after,/etc/xdg/nvim/after,/home/wongxy/.config/nvim/after"
-- string	(default "IPLPPPQPP TPHPLIPpLpItpplpipbp")
-- 			global
-- 	Specifies the nroff macros that separate paragraphs.  These are pairs
-- 	of two letters (see |object-motions|).
vim.o.paragraphs = "IPLPPPQPP TPHPLIPpLpItpplpipbp"
-- string	(default "")
-- 			global
-- 	When non-empty, specifies the key sequence that toggles the 'paste'
-- 	option.  This is like specifying a mapping: >
-- 	    :map {keys} :set invpaste<CR>
-- <	Where {keys} is the value of 'pastetoggle'.
-- 	The difference is that it will work even when 'paste' is set.
-- 	'pastetoggle' works in Insert mode and Normal mode, but not in
-- 	Command-line mode.
-- 	Mappings are checked first, thus overrule 'pastetoggle'.  However,
-- 	when 'paste' is on mappings are ignored in Insert mode, thus you can do
-- 	this: >
-- 	    :map <F10> :set paste<CR>
-- 	    :map <F11> :set nopaste<CR>
-- 	    :imap <F10> <C-O>:set paste<CR>
-- 	    :imap <F11> <nop>
-- 	    :set pastetoggle=<F11>
-- <	This will make <F10> start paste mode and <F11> stop paste mode.
-- 	Note that typing <F10> in paste mode inserts "<F10>", since in paste
-- 	mode everything is inserted literally, except the 'pastetoggle' key
-- 	sequence.
-- 	No timeout is used, this means that a multi-key 'pastetoggle' can not
-- 	be triggered manually.
vim.o.pastetoggle = ""
-- string	(default "")
-- 			global
-- 	Expression which is evaluated to apply a patch to a file and generate
-- 	the resulting new version of the file.  See |diff-patchexpr|.
vim.o.patchexpr = ""
-- string	(default "")
-- 			global
-- 	When non-empty the oldest version of a file is kept.  This can be used
-- 	to keep the original version of a file if you are changing files in a
-- 	source distribution.  Only the first time that a file is written a
-- 	copy of the original file will be kept.  The name of the copy is the
-- 	name of the original file with the string in the 'patchmode' option
-- 	appended.  This option should start with a dot.  Use a string like
-- 	".orig" or ".org".  'backupdir' must not be empty for this to work
-- 	(Detail: The backup file is renamed to the patchmode file after the
-- 	new file has been successfully written, that's why it must be possible
-- 	to write a backup file).  If there was no file to be backed up, an
-- 	empty file is created.
-- 	When the 'backupskip' pattern matches, a patchmode file is not made.
-- 	Using 'patchmode' for compressed files appends the extension at the
-- 	end (e.g., "file.gz.orig"), thus the resulting name isn't always
-- 	recognized as a compressed file.
-- 	Only normal file name characters can be used, "/\*?[|<>" are illegal.
vim.o.patchmode = ""
-- string (default: "latin1" or value from $LANG)
-- 			global
-- 	Sets the character encoding used inside Vim.  It applies to text in
-- 	the buffers, registers, Strings in expressions, text stored in the
-- 	viminfo file, etc.  It sets the kind of characters which Vim can work
-- 	with.  See |encoding-names| for the possible values.
vim.o.encoding = "utf-8"
-- number (default 12)
-- 			global
-- 	Default height for a preview window.  Used for |:ptag| and associated
-- 	commands.  Used for |CTRL-W_}| when no count is given.
vim.o.previewheight = "12"
-- string	(default (as a single string):
-- 				     "8:SpecialKey,~:EndOfBuffer,@:NonText,
-- 				     d:Directory,e:ErrorMsg,i:IncSearch,
-- 				     l:Search,m:MoreMsg,M:ModeMsg,n:LineNr,
-- 				     a:LineNrAbove,b:LineNrBelow,
-- 				     N:CursorLineNr,r:Question,s:StatusLine,
-- 				     S:StatusLineNC,c:VertSplit,t:Title,
-- 				     v:Visual,V:VisualNOS,w:WarningMsg,
-- 				     W:WildMenu,f:Folded,F:FoldColumn,
-- 				     A:DiffAdd,C:DiffChange,D:DiffDelete,
-- 				     T:DiffText,>:SignColumn,-:Conceal,
-- 				     B:SpellBad,P:SpellCap,R:SpellRare,
-- 				     L:SpellLocal,+:Pmenu,=:PmenuSel,
-- 				     x:PmenuSbar,X:PmenuThumb,*:TabLine,
-- 				     #:TabLineSel,_:TabLineFill,!:CursorColumn,
-- 				     .:CursorLine,o:ColorColumn,q:QuickFixLine,
-- 				     z:StatusLineTerm,Z:StatusLineTermNC")
-- 			global
-- 	This option can be used to set highlighting mode for various
-- 	occasions.  It is a comma separated list of character pairs.  The
-- 	first character in a pair gives the occasion, the second the mode to
-- 	use for that occasion.  The occasions are:
-- 	|hl-SpecialKey|	 8  Meta and special keys listed with ":map"
-- 	|hl-EndOfBuffer|   ~  lines after the last line in the buffer
-- 	|hl-NonText|	 @  '@' at the end of the window and
-- 			    characters from 'showbreak'
-- 	|hl-Directory|	 d  directories in CTRL-D listing and other special
-- 			    things in listings
-- 	|hl-ErrorMsg|	 e  error messages
-- 			 h  (obsolete, ignored)
-- 	|hl-IncSearch|	 i  'incsearch' highlighting
-- 	|hl-Search|	 l  last search pattern highlighting (see 'hlsearch')
-- 	|hl-MoreMsg|	 m  |more-prompt|
-- 	|hl-ModeMsg|	 M  Mode (e.g., "-- INSERT --")
-- 	|hl-LineNr|	 n  line number for ":number" and ":#" commands, and
-- 			    when 'number' or 'relativenumber' option is set.
-- 	|hl-LineNrAbove|   a  line number above the cursor for when the
-- 			    'relativenumber' option is set.
-- 	|hl-LineNrBelow|   b  line number below the cursor for when the
-- 			    'relativenumber' option is set.
-- 	|hl-CursorLineNr|  N like n for when 'cursorline' or 'relativenumber' is
-- 			    set.
-- 	|hl-Question|	 r  |hit-enter| prompt and yes/no questions
-- 	|hl-StatusLine|	 s  status line of current window |status-line|
-- 	|hl-StatusLineNC|  S  status lines of not-current windows
-- 	|hl-Title|	 t  Titles for output from ":set all", ":autocmd" etc.
-- 	|hl-VertSplit|	 c  column used to separate vertically split windows
-- 	|hl-Visual|	 v  Visual mode
-- 	|hl-VisualNOS|	 V  Visual mode when Vim does is "Not Owning the
-- 			    Selection" Only X11 Gui's |gui-x11| and
-- 			    |xterm-clipboard|.
-- 	|hl-WarningMsg|	 w  warning messages
-- 	|hl-WildMenu|	 W  wildcard matches displayed for 'wildmenu'
-- 	|hl-Folded|	 f  line used for closed folds
-- 	|hl-FoldColumn|	 F  'foldcolumn'
-- 	|hl-DiffAdd|	 A  added line in diff mode
-- 	|hl-DiffChange|	 C  changed line in diff mode
-- 	|hl-DiffDelete|	 D  deleted line in diff mode
-- 	|hl-DiffText|	 T  inserted text in diff mode
-- 	|hl-SignColumn|	 >  column used for |signs|
-- 	|hl-Conceal|	 -  the placeholders used for concealed characters
-- 			    (see 'conceallevel')
-- 	|hl-SpellBad|	 B  misspelled word |spell|
-- 	|hl-SpellCap|	 P  word that should start with capital |spell|
-- 	|hl-SpellRare|	 R  rare word |spell|
-- 	|hl-SpellLocal|	 L  word from other region |spell|
-- 	|hl-Pmenu|	 +  popup menu normal line
-- 	|hl-PmenuSel|	 =  popup menu selected line
-- 	|hl-PmenuSbar|	 x  popup menu scrollbar
-- 	|hl-PmenuThumb|	 X  popup menu scrollbar thumb
vim.o.highlight = "8:SpecialKey,~:EndOfBuffer,z:TermCursor,Z:TermCursorNC,@:NonText,d:Directory,e:ErrorMsg,i:IncSearch,l:Search,y:CurSearch,m:MoreMsg,M:ModeMsg,n:LineNr,a:LineNrAbove,b:LineNrBelow,N:CursorLineNr,G:CursorLineSign,O:CursorLineFoldr:Question,s:StatusLine,S:StatusLineNC,c:VertSplit,t:Title,v:Visual,V:VisualNOS,w:WarningMsg,W:WildMenu,f:Folded,F:FoldColumn,A:DiffAdd,C:DiffChange,D:DiffDelete,T:DiffText,>:SignColumn,-:Conceal,B:SpellBad,P:SpellCap,R:SpellRare,L:SpellLocal,+:Pmenu,=:PmenuSel,x:PmenuSbar,X:PmenuThumb,*:TabLine,#:TabLineSel,_:TabLineFill,!:CursorColumn,.:CursorLine,o:ColorColumn,q:QuickFixLine,0:Whitespace,I:NormalNC"
-- string	(default empty)
-- 			global
-- 	The name of the printer to be used for |:hardcopy|.
-- 	See |pdev-option|.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.printdevice = ""
-- string	(default empty, except for some systems)
-- 			global
-- 	Sets the character encoding used when printing.
-- 	See |penc-option|.
vim.o.printencoding = ""
-- string	(default: see below)
-- 			global
-- 	Expression used to print the PostScript produced with |:hardcopy|.
-- 	See |pexpr-option|.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.printexpr = "system(['lpr'] + (empty(&printdevice)?[]:['-P', &printdevice]) + [v:fname_in]). delete(v:fname_in)+ v:shell_error"
-- string	(default "courier")
-- 			global
-- 	The name of the font that will be used for |:hardcopy|.
-- 	See |pfn-option|.
vim.o.printfont = "courier"
-- string  (default "%<%f%h%m%=Page %N")
-- 			global
-- 	The format of the header produced in |:hardcopy| output.
-- 	See |pheader-option|.
vim.o.printheader = "%<%f%h%m%=Page %N"
-- string (default "")
-- 			global
-- 	The CJK character set to be used for CJK output from |:hardcopy|.
-- 	See |pmbcs-option|.
vim.o.printmbcharset = ""
-- string (default "")
-- 			global
-- 	List of font names to be used for CJK output from |:hardcopy|.
-- 	See |pmbfn-option|.
vim.o.printmbfont = ""
-- string (default "")
-- 			global
-- 	List of items that control the format of the output of |:hardcopy|.
-- 	See |popt-option|.
vim.o.printoptions = ""
-- boolean	(default on)
-- 			global
-- 	When on a ":" prompt is used in Ex mode.
vim.o.prompt = "true"
-- number	(default 0)
-- 			global
-- 	Enables pseudo-transparency for the |popup-menu|. Valid values are in
-- 	the range of 0 for fully opaque popupmenu (disabled) to 100 for fully
-- 	transparent background. Values between 0-30 are typically most useful.
vim.o.pumblend = "0"
-- number	(default 0)
-- 			global
-- 	Maximum number of items to show in the popup menu
-- 	(|ins-completion-menu|). Zero means "use available screen space".
vim.o.pumheight = "0"
-- number	(default 15)
-- 			global
-- 	Minimum width for the popup menu (|ins-completion-menu|).  If the
-- 	cursor column + 'pumwidth' exceeds screen width, the popup menu is
-- 	nudged to fit on the screen.
vim.o.pumwidth = "15"
-- number	(default depends on the build)
-- 			global
-- 	Specifies the python version used for pyx* functions and commands
-- 	|python_x|.  The default value is as follows:
vim.o.pyxversion = "3"
-- boolean	(default off)
-- 			global
-- 			{only for Windows}
-- 	When set, a forward slash is used when expanding file names.  This is
-- 	useful when a Unix-like shell is used instead of command.com or
-- 	cmd.exe.  Backward slashes can still be typed, but they are changed to
-- 	forward slashes by Vim.
-- 	Note that setting or resetting this option has no effect for some
-- 	existing file names, thus this option needs to be set before opening
-- 	any file for best results.  This might change in the future.
-- 	'shellslash' only works when a backslash can be used as a path
-- 	separator.  To test if this is so use: >
-- 		if exists('+shellslash')
-- <
-- 			*'shelltemp'* *'stmp'* *'noshelltemp'* *'nostmp'*
vim.o.shellslash = "false"
-- boolean	(default off)
-- 			global
-- 	When on, the OS function fsync() will be called after saving a file
-- 	(|:write|, |writefile()|, …), |swap-file| and |shada-file|. This
-- 	flushes the file to disk, ensuring that it is safely written.
-- 	Slow on some systems: writing buffers, quitting Nvim, and other
-- 	operations may sometimes take a few seconds.
vim.o.fsync = "false"
-- string	(default '')
-- 			global
-- 	Flags to change the way redrawing works, for debugging purposes.
-- 	Most useful with 'writedelay' set to some reasonable value.
-- 	Supports the following flags:
-- 	    compositor	Indicate what redraws come from the compositor
-- 			by briefly flashing the redrawn regions in colors
-- 			indicating the redraw type. These are the highlight
-- 			groups used (and their default colors):
-- 		RedrawDebugNormal   gui=reverse   normal redraw passed through
-- 		RedrawDebugClear    guibg=Yellow  clear event passed through
-- 		RedrawDebugComposed guibg=Green   redraw event modified by the
-- 						  compositor (due to
-- 						  overlapping grids, etc)
-- 		RedrawDebugRecompose guibg=Red    redraw generated by the
-- 						  compositor itself, due to a
-- 						  grid being moved or deleted.
-- 	    nothrottle	Turn off throttling of the message grid. This is an
-- 			optimization that joins many small scrolls to one
-- 			larger scroll when drawing the message area (with
-- 			'display' msgsep flag active).
-- 	    invalid	Enable stricter checking (abort) of inconsistencies
-- 			of the internal screen state. This is mostly
-- 			useful when running nvim inside a debugger (and
-- 			the test suite).
-- 	    nodelta	Send all internally redrawn cells to the UI, even if
-- 	                they are unchanged from the already displayed state.
vim.o.redrawdebug = ""
-- number	(default 2000)
-- 			global
-- 	Time in milliseconds for redrawing the display.  Applies to
-- 	'hlsearch', 'inccommand', |:match| highlighting and syntax
-- 	highlighting.
-- 	When redrawing takes more than this many milliseconds no further
-- 	matches will be highlighted.
-- 	For syntax highlighting the time applies per window.  When over the
-- 	limit syntax highlighting is disabled until |CTRL-L| is used.
-- 	This is used to avoid that Vim hangs when using a very complicated
-- 	pattern.
vim.o.redrawtime = "2000"
-- number	(default 0)
-- 			global
-- 	This selects the default regexp engine. |two-engines|
-- 	The possible values are:
-- 		0	automatic selection
-- 		1	old engine
-- 		2	NFA engine
-- 	Note that when using the NFA engine and the pattern contains something
-- 	that is not supported the pattern will not match.  This is only useful
-- 	for debugging the regexp engine.
-- 	Using automatic selection enables Vim to switch the engine, if the
-- 	default engine becomes too costly.  E.g., when the NFA engine uses too
-- 	many states.  This should prevent Vim from hanging on a combination of
-- 	a complex pattern with long text.
vim.o.regexpengine = "0"
-- boolean (default off)
-- 			global
-- 	When on, Vim will change the current working directory whenever you
-- 	open a file, switch buffers, delete a buffer or open/close a window.
-- 	It will change to the directory containing the file which was opened
-- 	or selected.
-- 	Note: When this option is on some plugins may not work.
vim.o.autochdir = "false"
-- boolean	(default on)
-- 			global
-- 	Allows for mappings to work recursively.  If you do not want this for
-- 	a single entry, use the :noremap[!] command.
-- 	NOTE: To avoid portability problems with Vim scripts, always keep
-- 	this option at the default "on".  Only switch it off when working with
-- 	old Vi scripts.
vim.o.remap = "true"
-- number	(default 2)
-- 			global
-- 	Threshold for reporting number of lines changed.  When the number of
-- 	changed lines is more than 'report' a message will be given for most
-- 	":" commands.  If you want it always, set 'report' to 0.
-- 	For the ":substitute" command the number of substitutions is used
-- 	instead of the number of lines.
vim.o.report = "2"
-- boolean	(default off)
-- 			global
-- 	Inserting characters in Insert mode will work backwards.  See "typing
-- 	backwards" |ins-reverse|.  This option can be toggled with the CTRL-_
-- 	command in Insert mode, when 'allowrevins' is set.
-- 	This option is reset when 'paste' is set and restored when 'paste' is
-- 	reset.
vim.o.revins = "false"
-- string (default: "single")
-- 			global
-- 	Tells Vim what to do with characters with East Asian Width Class
-- 	Ambiguous (such as Euro, Registered Sign, Copyright Sign, Greek
-- 	letters, Cyrillic letters).
vim.o.ambiwidth = "single"
-- boolean	(default off)
-- 			global
-- 	Enable the entering of digraphs in Insert mode with {char1} <BS>
-- 	{char2}.  See |digraphs|.
vim.o.digraph = "false"
-- boolean	(default on)
-- 			global
-- 	Show the line and column number of the cursor position, separated by a
-- 	comma.  When there is room, the relative position of the displayed
-- 	text in the file is shown on the far right:
-- 		Top	first line is visible
-- 		Bot	last line is visible
-- 		All	first and last line are visible
-- 		45%	relative position in the file
-- 	If 'rulerformat' is set, it will determine the contents of the ruler.
-- 	Each window has its own ruler.  If a window has a status line, the
-- 	ruler is shown there.  Otherwise it is shown in the last line of the
-- 	screen.  If the statusline is given by 'statusline' (i.e. not empty),
-- 	this option takes precedence over 'ruler' and 'rulerformat'
-- 	If the number of characters displayed is different from the number of
-- 	bytes in the text (e.g., for a TAB or a multi-byte character), both
-- 	the text column (byte number) and the screen column are shown,
-- 	separated with a dash.
-- 	For an empty line "0-1" is shown.
-- 	For an empty buffer the line number will also be zero: "0,0-1".
-- 	This option is reset when 'paste' is set and restored when 'paste' is
-- 	reset.
-- 	If you don't want to see the ruler all the time but want to know where
-- 	you are, use "g CTRL-G" |g_CTRL-G|.
vim.o.ruler = "true"
-- string	(default empty)
-- 			global
-- 	When this option is not empty, it determines the content of the ruler
-- 	string, as displayed for the 'ruler' option.
-- 	The format of this option is like that of 'statusline'.
-- 	This option cannot be set in a modeline when 'modelineexpr' is off.
vim.o.rulerformat = ""
-- string	(default:     "$XDG_CONFIG_HOME/nvim,
-- 					       $XDG_CONFIG_DIRS[1]/nvim,
-- 					       $XDG_CONFIG_DIRS[2]/nvim,
-- 					       …
-- 					       $XDG_DATA_HOME/nvim[-data]/site,
-- 					       $XDG_DATA_DIRS[1]/nvim/site,
-- 					       $XDG_DATA_DIRS[2]/nvim/site,
-- 					       …
-- 					       $VIMRUNTIME,
-- 					       …
-- 					       $XDG_DATA_DIRS[2]/nvim/site/after,
-- 					       $XDG_DATA_DIRS[1]/nvim/site/after,
-- 					       $XDG_DATA_HOME/nvim[-data]/site/after,
-- 					       …
-- 					       $XDG_CONFIG_DIRS[2]/nvim/after,
-- 					       $XDG_CONFIG_DIRS[1]/nvim/after,
-- 					       $XDG_CONFIG_HOME/nvim/after")
-- 			global
-- 	List of directories to be searched for these runtime files:
-- 	  filetype.vim	filetypes by file name |new-filetype|
-- 	  scripts.vim	filetypes by file contents |new-filetype-scripts|
-- 	  autoload/	automatically loaded scripts |autoload-functions|
-- 	  colors/	color scheme files |:colorscheme|
-- 	  compiler/	compiler files |:compiler|
-- 	  doc/		documentation |write-local-help|
-- 	  ftplugin/	filetype plugins |write-filetype-plugin|
-- 	  indent/	indent scripts |indent-expression|
-- 	  keymap/	key mapping files |mbyte-keymap|
-- 	  lang/		menu translations |:menutrans|
-- 	  menu.vim	GUI menus |menu.vim|
-- 	  pack/		packages |:packadd|
-- 	  plugin/	plugin scripts |write-plugin|
-- 	  print/	files for printing |postscript-print-encoding|
-- 	  rplugin/	|remote-plugin| scripts
-- 	  spell/	spell checking files |spell|
-- 	  syntax/	syntax files |mysyntaxfile|
-- 	  tutor/	tutorial files |:Tutor|
vim.o.runtimepath = "/home/wongxy/.config/nvim,/etc/xdg/nvim,/home/wongxy/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/home/wongxy/neovim/share/nvim/runtime,/home/wongxy/neovim/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/home/wongxy/.local/share/nvim/site/after,/etc/xdg/nvim/after,/home/wongxy/.config/nvim/after"
-- string	(default "")
-- 			global
-- 	These values can be used:
-- 	msg	Error messages that would otherwise be omitted will be given
-- 		anyway.
-- 	throw	Error messages that would otherwise be omitted will be given
-- 		anyway and also throw an exception and set |v:errmsg|.
-- 	beep	A message will be given when otherwise only a beep would be
-- 		produced.
-- 	The values can be combined, separated by a comma.
-- 	"msg" and "throw" are useful for debugging 'foldexpr', 'formatexpr' or
-- 	'indentexpr'.
vim.o.debug = ""
-- boolean	(default on)
-- 			global
-- 	Allows writing files.  When not set, writing a file is not allowed.
-- 	Can be used for a view-only mode, where modifications to the text are
-- 	still allowed.  Can be reset with the |-m| or |-M| command line
-- 	argument.  Filtering text is still possible, even though this requires
-- 	writing a temporary file.
vim.o.write = "true"
-- boolean	(default off)
-- 			global
-- 	Allows writing to any file with no need for "!" override.
vim.o.writeany = "false"
-- number	(default 1)
-- 			global
-- 	Minimal number of lines to scroll when the cursor gets off the
-- 	screen (e.g., with "j").  Not used for scroll commands (e.g., CTRL-E,
-- 	CTRL-D).  Useful if your terminal scrolls very slowly.
-- 	When set to a negative number from -1 to -100 this is used as the
-- 	percentage of the window height.  Thus -50 scrolls half the window
-- 	height.
vim.o.scrolljump = "1"
-- number	(default 0)
-- 			global or local to window |global-local|
-- 	Minimal number of screen lines to keep above and below the cursor.
-- 	This will make some context visible around where you are working.  If
-- 	you set it to a very large value (999) the cursor line will always be
-- 	in the middle of the window (except at the start or end of the file or
-- 	when long lines wrap).
-- 	After using the local value, go back the global value with one of
-- 	these two: >
-- 		setlocal scrolloff<
-- 		setlocal scrolloff=-1
-- <	For scrolling horizontally see 'sidescrolloff'.
vim.o.scrolloff = "0"
-- string	(default "ver,jump")
-- 			global
-- 	This is a comma-separated list of words that specifies how
-- 	'scrollbind' windows should behave.  'sbo' stands for ScrollBind
-- 	Options.
-- 	The following words are available:
-- 	    ver		Bind vertical scrolling for 'scrollbind' windows
-- 	    hor		Bind horizontal scrolling for 'scrollbind' windows
-- 	    jump	Applies to the offset between two windows for vertical
-- 			scrolling.  This offset is the difference in the first
-- 			displayed line of the bound windows.  When moving
-- 			around in a window, another 'scrollbind' window may
-- 			reach a position before the start or after the end of
-- 			the buffer.  The offset is not changed though, when
-- 			moving back the 'scrollbind' window will try to scroll
-- 			to the desired position when possible.
-- 			When now making that window the current one, two
-- 			things can be done with the relative offset:
-- 			1. When "jump" is not included, the relative offset is
-- 			   adjusted for the scroll position in the new current
-- 			   window.  When going back to the other window, the
-- 			   new relative offset will be used.
-- 			2. When "jump" is included, the other windows are
-- 			   scrolled to keep the same relative offset.  When
-- 			   going back to the other window, it still uses the
-- 			   same relative offset.
-- 	Also see |scroll-binding|.
-- 	When 'diff' mode is active there always is vertical scroll binding,
-- 	even when "ver" isn't there.
vim.o.scrollopt = "ver,jump"
-- string	(default "SHNHH HUnhsh")
-- 			global
-- 	Specifies the nroff macros that separate sections.  These are pairs of
-- 	two letters (See |object-motions|).  The default makes a section start
-- 	at the nroff macros ".SH", ".NH", ".H", ".HU", ".nh" and ".sh".
vim.o.sections = "SHNHH HUnhsh"
-- boolean	(default off)
-- 			global
-- 	When on, ":autocmd", shell and write commands are not allowed in
-- 	".nvimrc" and ".exrc" in the current directory and map commands are
-- 	displayed.  Switch it off only if you know that you will not run into
-- 	problems, or when the 'exrc' option is off.  On Unix this option is
-- 	only used if the ".nvimrc" or ".exrc" is not owned by you.  This can be
-- 	dangerous if the systems allows users to do a "chown".  You better set
-- 	'secure' at the end of your |init.vim| then.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.secure = "false"
-- string	(default "inclusive")
-- 			global
-- 	This option defines the behavior of the selection.  It is only used
-- 	in Visual and Select mode.
-- 	Possible values:
-- 	   value	past line     inclusive ~
-- 	   old		   no		yes
-- 	   inclusive	   yes		yes
-- 	   exclusive	   yes		no
-- 	"past line" means that the cursor is allowed to be positioned one
-- 	character past the line.
-- 	"inclusive" means that the last character of the selection is included
-- 	in an operation.  For example, when "x" is used to delete the
-- 	selection.
-- 	When "old" is used and 'virtualedit' allows the cursor to move past
-- 	the end of line the line break still isn't included.
-- 	Note that when "exclusive" is used and selecting from the end
-- 	backwards, you cannot include the last character of a line, when
-- 	starting in Normal mode and 'virtualedit' empty.
vim.o.selection = "inclusive"
-- string	(default "")
-- 			global
-- 	This is a comma separated list of words, which specifies when to start
-- 	Select mode instead of Visual mode, when a selection is started.
-- 	Possible values:
-- 	   mouse	when using the mouse
-- 	   key		when using shifted special keys
-- 	   cmd		when using "v", "V" or CTRL-V
-- 	See |Select-mode|.
-- 	The 'selectmode' option is set by the |:behave| command.
vim.o.selectmode = ""
-- string	(default: "blank,buffers,curdir,folds,
-- 					       help,tabpages,winsize"
-- 				 Vi default: "blank,buffers,curdir,folds,
-- 					       help,options,tabpages,winsize")
-- 			global
-- 	Changes the effect of the |:mksession| command.  It is a comma
-- 	separated list of words.  Each word enables saving and restoring
-- 	something:
-- 	   word		save and restore ~
-- 	   blank	empty windows
-- 	   buffers	hidden and unloaded buffers, not just those in windows
-- 	   curdir	the current directory
-- 	   folds	manually created folds, opened/closed folds and local
-- 			fold options
-- 	   globals	global variables that start with an uppercase letter
-- 			and contain at least one lowercase letter.  Only
-- 			String and Number types are stored.
-- 	   help		the help window
-- 	   localoptions	options and mappings local to a window or buffer (not
-- 			global values for local options)
-- 	   options	all options and mappings (also global values for local
-- 			options)
-- 	   resize	size of the Vim window: 'lines' and 'columns'
-- 	   sesdir	the directory in which the session file is located
-- 			will become the current directory (useful with
-- 			projects accessed over a network from different
-- 			systems)
-- 	   slash	backslashes in file names replaced with forward
-- 			slashes
-- 	   tabpages	all tab pages; without this only the current tab page
-- 			is restored, so that you can make a session for each
-- 			tab page separately
-- 	   terminal	include terminal windows where the command can be
-- 			restored
-- 	   unix		with Unix end-of-line format (single <NL>), even when
-- 			on Windows or DOS
-- 	   winpos	position of the whole Vim window
-- 	   winsize	window sizes
vim.o.sessionoptions = "blank,buffers,curdir,folds,help,tabpages,winsize"
-- string	(Vim default for
-- 				   Win32:  !,'100,<50,s10,h,rA:,rB:
-- 				   others: !,'100,<50,s10,h
-- 				 Vi default: "")
-- 			global
-- 	When non-empty, the shada file is read upon startup and written
-- 	when exiting Vim (see |shada-file|).  The string should be a comma
-- 	separated list of parameters, each consisting of a single character
-- 	identifying the particular parameter, followed by a number or string
-- 	which specifies the value of that parameter.  If a particular
-- 	character is left out, then the default value is used for that
-- 	parameter.  The following is a list of the identifying characters and
-- 	the effect of their value.
-- 	CHAR	VALUE	~
-- 							*shada-!*
-- 	!	When included, save and restore global variables that start
-- 		with an uppercase letter, and don't contain a lowercase
-- 		letter.  Thus "KEEPTHIS and "K_L_M" are stored, but "KeepThis"
-- 		and "_K_L_M" are not.  Nested List and Dict items may not be
-- 		read back correctly, you end up with an empty item.
-- 							*shada-quote*
-- 	"	Maximum number of lines saved for each register.  Old name of
-- 		the '<' item, with the disadvantage that you need to put a
-- 		backslash before the ", otherwise it will be recognized as the
-- 		start of a comment!
-- 							*shada-%*
-- 	%	When included, save and restore the buffer list.  If Vim is
-- 		started with a file name argument, the buffer list is not
-- 		restored.  If Vim is started without a file name argument, the
-- 		buffer list is restored from the shada file.  Quickfix
-- 		('buftype'), unlisted ('buflisted'), unnamed and buffers on
-- 		removable media (|shada-r|) are not saved.
-- 		When followed by a number, the number specifies the maximum
-- 		number of buffers that are stored.  Without a number all
-- 		buffers are stored.
-- 							*shada-'*
-- 	'	Maximum number of previously edited files for which the marks
-- 		are remembered.  This parameter must always be included when
-- 		'shada' is non-empty.
-- 		Including this item also means that the |jumplist| and the
-- 		|changelist| are stored in the shada file.
-- 							*shada-/*
-- 	/	Maximum number of items in the search pattern history to be
-- 		saved.  If non-zero, then the previous search and substitute
-- 		patterns are also saved.  When not included, the value of
-- 		'history' is used.
-- 							*shada-:*
-- 	:	Maximum number of items in the command-line history to be
-- 		saved.  When not included, the value of 'history' is used.
-- 							*shada-<*
-- 	<	Maximum number of lines saved for each register.  If zero then
-- 		registers are not saved.  When not included, all lines are
-- 		saved.  '"' is the old name for this item.
-- 		Also see the 's' item below: limit specified in KiB.
-- 							*shada-@*
-- 	@	Maximum number of items in the input-line history to be
-- 		saved.  When not included, the value of 'history' is used.
-- 							*shada-c*
-- 	c	Dummy option, kept for compatibility reasons.  Has no actual
-- 		effect: ShaDa always uses UTF-8 and 'encoding' value is fixed
-- 		to UTF-8 as well.
-- 							*shada-f*
-- 	f	Whether file marks need to be stored.  If zero, file marks ('0
-- 		to '9, 'A to 'Z) are not stored.  When not present or when
-- 		non-zero, they are all stored.  '0 is used for the current
-- 		cursor position (when exiting or when doing |:wshada|).
-- 							*shada-h*
-- 	h	Disable the effect of 'hlsearch' when loading the shada
-- 		file.  When not included, it depends on whether ":nohlsearch"
-- 		has been used since the last search command.
-- 							*shada-n*
-- 	n	Name of the shada file.  The name must immediately follow
-- 		the 'n'.  Must be at the end of the option!  If the
-- 		'shadafile' option is set, that file name overrides the one
-- 		given here with 'shada'.  Environment variables are
-- 		expanded when opening the file, not when setting the option.
-- 							*shada-r*
-- 	r	Removable media.  The argument is a string (up to the next
-- 		',').  This parameter can be given several times.  Each
-- 		specifies the start of a path for which no marks will be
-- 		stored.  This is to avoid removable media.  For Windows you
-- 		could use "ra:,rb:".  You can also use it for temp files,
-- 		e.g., for Unix: "r/tmp".  Case is ignored.
-- 							*shada-s*
-- 	s	Maximum size of an item contents in KiB.  If zero then nothing
-- 		is saved.  Unlike Vim this applies to all items, except for
-- 		the buffer list and header.  Full item size is off by three
-- 		unsigned integers: with `s10` maximum item size may be 1 byte
-- 		(type: 7-bit integer) + 9 bytes (timestamp: up to 64-bit
-- 		integer) + 3 bytes (item size: up to 16-bit integer because
-- 		2^8 < 10240 < 2^16) + 10240 bytes (requested maximum item
-- 		contents size) = 10253 bytes.
vim.o.shada = "!,'100,<50,s10,h"
-- string	(default: "")
-- 			global
-- 	When non-empty, overrides the file name used for |shada| (viminfo).
-- 	When equal to "NONE" no shada file will be read or written.
-- 	This option can be set with the |-i| command line flag.  The |--clean|
-- 	command line flag sets it to "NONE".
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.shadafile = ""
-- string	(default $SHELL or "sh",
-- 					Windows: "cmd.exe")
-- 			global
-- 	Name of the shell to use for ! and :! commands.  When changing the
-- 	value also check these options: 'shellpipe', 'shellslash'
-- 	'shellredir', 'shellquote', 'shellxquote' and 'shellcmdflag'.
-- 	It is allowed to give an argument to the command, e.g.  "csh -f".
-- 	See |option-backslash| about including spaces and backslashes.
-- 	Environment variables are expanded |:set_env|.
-- 	If the name of the shell contains a space, you might need to enclose
-- 	it in quotes.  Example: >
-- 		:set shell=\"c:\program\ files\unix\sh.exe\"\ -f
-- <	Note the backslash before each quote (to avoid starting a comment) and
-- 	each space (to avoid ending the option value), so better use |:let-&|
-- 	like this: >
-- 		:let &shell='"C:\Program Files\unix\sh.exe" -f'
-- <	Also note that the "-f" is not inside the quotes, because it is not
-- 	part of the command name.
-- 							*shell-unquoting*
-- 	Rules regarding quotes:
-- 	1. Option is split on space and tab characters that are not inside
-- 	   quotes: "abc def" runs shell named "abc" with additional argument
-- 	   "def", '"abc def"' runs shell named "abc def" with no additional
-- 	   arguments (here and below: additional means “additional to
-- 	   'shellcmdflag'”).
-- 	2. Quotes in option may be present in any position and any number:
-- 	   '"abc"', '"a"bc', 'a"b"c', 'ab"c"' and '"a"b"c"' are all equivalent
-- 	   to just "abc".
-- 	3. Inside quotes backslash preceding backslash means one backslash.
-- 	   Backslash preceding quote means one quote. Backslash preceding
-- 	   anything else means backslash and next character literally:
-- 	   '"a\\b"' is the same as "a\b", '"a\\"b"' runs shell named literally
-- 	   'a"b', '"a\b"' is the same as "a\b" again.
-- 	4. Outside of quotes backslash always means itself, it cannot be used
-- 	   to escape quote: 'a\"b"' is the same as "a\b".
-- 	Note that such processing is done after |:set| did its own round of
-- 	unescaping, so to keep yourself sane use |:let-&| like shown above.
-- 							*shell-powershell*
-- 	To use powershell: >
-- 		let &shell = has('win32') ? 'powershell' : 'pwsh'
-- 		set shellquote= shellpipe=\| shellxquote=
-- 		set shellcmdflag=-NoLogo\ -NoProfile\ -ExecutionPolicy\ RemoteSigned\ -Command
-- 		set shellredir=\|\ Out-File\ -Encoding\ UTF8
vim.o.shell = "/usr/bin/zsh"
-- string	(default: "-c"; Windows: "/s /c")
-- 			global
-- 	Flag passed to the shell to execute "!" and ":!" commands; e.g.,
-- 	`bash.exe -c ls` or `cmd.exe /s /c "dir"`.  For Windows
-- 	systems, the default is set according to the value of 'shell', to
-- 	reduce the need to set this option by the user.
-- 	On Unix it can have more than one flag.  Each white space separated
-- 	part is passed as an argument to the shell command.
-- 	See |option-backslash| about including spaces and backslashes.
-- 	See |shell-unquoting| which talks about separating this option into
-- 	multiple arguments.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.shellcmdflag = "-c"
-- string	(default ">", "| tee", "|& tee" or "2>&1| tee")
-- 			global
-- 	String to be used to put the output of the ":make" command in the
-- 	error file.  See also |:make_makeprg|.  See |option-backslash| about
-- 	including spaces and backslashes.
-- 	The name of the temporary file can be represented by "%s" if necessary
-- 	(the file name is appended automatically if no %s appears in the value
-- 	of this option).
-- 	For Windows the default is ">".  The output is directly saved in a file
-- 	and not echoed to the screen.
-- 	For Unix the default it "| tee".  The stdout of the compiler is saved
-- 	in a file and echoed to the screen.  If the 'shell' option is "csh" or
-- 	"tcsh" after initializations, the default becomes "|& tee".  If the
-- 	'shell' option is "sh", "ksh", "mksh", "pdksh", "zsh" or "bash" the
-- 	default becomes "2>&1| tee".  This means that stderr is also included.
-- 	Before using the 'shell' option a path is removed, thus "/bin/sh" uses
-- 	"sh".
-- 	The initialization of this option is done after reading the vimrc
-- 	and the other initializations, so that when the 'shell' option is set
-- 	there, the 'shellpipe' option changes automatically, unless it was
-- 	explicitly set before.
-- 	When 'shellpipe' is set to an empty string, no redirection of the
-- 	":make" output will be done.  This is useful if you use a 'makeprg'
-- 	that writes to 'makeef' by itself.  If you want no piping, but do
-- 	want to include the 'makeef', set 'shellpipe' to a single space.
-- 	Don't forget to precede the space with a backslash: ":set sp=\ ".
-- 	In the future pipes may be used for filtering and this option will
-- 	become obsolete (at least for Unix).
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.shellpipe = "2>&1| tee"
-- string	(default: ""; Windows, when 'shell'
-- 					contains "sh" somewhere: "\"")
-- 			global
-- 	Quoting character(s), put around the command passed to the shell, for
-- 	the "!" and ":!" commands.  The redirection is kept outside of the
-- 	quoting.  See 'shellxquote' to include the redirection.  It's
-- 	probably not useful to set both options.
-- 	This is an empty string by default.  Only known to be useful for
-- 	third-party shells on Windows systems, such as the MKS Korn Shell
-- 	or bash, where it should be "\"".  The default is adjusted according
-- 	the value of 'shell', to reduce the need to set this option by the
-- 	user.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.shellquote = ""
-- string	(default ">", ">&" or ">%s 2>&1")
-- 			global
-- 	String to be used to put the output of a filter command in a temporary
-- 	file.  See also |:!|.  See |option-backslash| about including spaces
-- 	and backslashes.
-- 	The name of the temporary file can be represented by "%s" if necessary
-- 	(the file name is appended automatically if no %s appears in the value
-- 	of this option).
-- 	The default is ">".  For Unix, if the 'shell' option is "csh", "tcsh"
-- 	or "zsh" during initializations, the default becomes ">&".  If the
-- 	'shell' option is "sh", "ksh" or "bash" the default becomes
-- 	">%s 2>&1".  This means that stderr is also included.
-- 	For Win32, the Unix checks are done and additionally "cmd" is checked
-- 	for, which makes the default ">%s 2>&1".  Also, the same names with
-- 	".exe" appended are checked for.
-- 	The initialization of this option is done after reading the vimrc
-- 	and the other initializations, so that when the 'shell' option is set
-- 	there, the 'shellredir' option changes automatically unless it was
-- 	explicitly set before.
-- 	In the future pipes may be used for filtering and this option will
-- 	become obsolete (at least for Unix).
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.shellredir = ">%s 2>&1"
-- boolean	(Vim default on, Vi default off)
-- 			global
-- 	When on, use temp files for shell commands.  When off use a pipe.
-- 	When using a pipe is not possible temp files are used anyway.
-- 	The advantage of using a pipe is that nobody can read the temp file
-- 	and the 'shell' command does not need to support redirection.
-- 	The advantage of using a temp file is that the file type and encoding
-- 	can be detected.
-- 	The |FilterReadPre|, |FilterReadPost| and |FilterWritePre|,
-- 	|FilterWritePost| autocommands event are not triggered when
-- 	'shelltemp' is off.
-- 	|system()| does not respect this option, it always uses pipes.
vim.o.shelltemp = "true"
-- string	(default: "")
-- 			global
-- 	When 'shellxquote' is set to "(" then the characters listed in this
-- 	option will be escaped with a '^' character.  This makes it possible
-- 	to execute most external commands with cmd.exe.
vim.o.shellxescape = ""
-- string	(default: "", Windows: "\"")
-- 			global
-- 	Quoting character(s), put around the command passed to the shell, for
-- 	the "!" and ":!" commands.  Includes the redirection.  See
-- 	'shellquote' to exclude the redirection.  It's probably not useful
-- 	to set both options.
-- 	When the value is '(' then ')' is appended. When the value is '"('
-- 	then ')"' is appended.
-- 	When the value is '(' then also see 'shellxescape'.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.shellxquote = ""
-- boolean	(default off)
-- 			global
-- 	Round indent to multiple of 'shiftwidth'.  Applies to > and <
-- 	commands.  CTRL-T and CTRL-D in Insert mode always round the indent to
-- 	a multiple of 'shiftwidth' (this is Vi compatible).
vim.o.shiftround = "false"
-- string	(default "^\s*#\s*define")
-- 			global or local to buffer |global-local|
-- 	Pattern to be used to find a macro definition.  It is a search
-- 	pattern, just like for the "/" command.  This option is used for the
-- 	commands like "[i" and "[d" |include-search|.  The 'isident' option is
-- 	used to recognize the defined name after the match:
-- 		{match with 'define'}{non-ID chars}{defined name}{non-ID char}
-- 	See |option-backslash| about inserting backslashes to include a space
-- 	or backslash.
-- 	The default value is for C programs.  For C++ this value would be
-- 	useful, to include const type declarations: >
-- 		^\(#\s*define\|[a-z]*\s*const\s*[a-z]*\)
-- <	You can also use "\ze" just before the name and continue the pattern
-- 	to check what is following.  E.g. for Javascript, if a function is
-- 	defined with "func_name = function(args)": >
-- 		^\s*\ze\i\+\s*=\s*function(
-- <	If the function is defined with "func_name : function() {...": >
-- 	        ^\s*\ze\i\+\s*[:]\s*(*function\s*(
-- <	When using the ":set" command, you need to double the backslashes!
-- 	To avoid that use `:let` with a single quote string: >
-- 		let &l:define = '^\s*\ze\k\+\s*=\s*function('
-- <
vim.o.define = "^\\s*#\\s*define"
-- string	(Vim default "filnxtToOF", Vi default: "S")
-- 			global
-- 	This option helps to avoid all the |hit-enter| prompts caused by file
-- 	messages, for example  with CTRL-G, and to avoid some other messages.
-- 	It is a list of flags:
-- 	 flag	meaning when present	~
-- 	  f	use "(3 of 5)" instead of "(file 3 of 5)"
-- 	  i	use "[noeol]" instead of "[Incomplete last line]"
-- 	  l	use "999L, 888C" instead of "999 lines, 888 characters"
-- 	  m	use "[+]" instead of "[Modified]"
-- 	  n	use "[New]" instead of "[New File]"
-- 	  r	use "[RO]" instead of "[readonly]"
-- 	  w	use "[w]" instead of "written" for file write message
-- 		and "[a]" instead of "appended" for ':w >> file' command
-- 	  x	use "[dos]" instead of "[dos format]", "[unix]" instead of
-- 		"[unix format]" and "[mac]" instead of "[mac format]".
-- 	  a	all of the above abbreviations
vim.o.shortmess = "filnxtToOF"
-- string	(default "")
-- 			global
-- 	String to put at the start of lines that have been wrapped.  Useful
-- 	values are "> " or "+++ ": >
-- 		:set showbreak=>\
-- <	Note the backslash to escape the trailing space.  It's easier like
-- 	this: >
-- 		:let &showbreak = '+++ '
-- <	Only printable single-cell characters are allowed, excluding <Tab> and
-- 	comma (in a future version the comma might be used to separate the
-- 	part that is shown at the end and at the start of a line).
-- 	The |hl-NonText| highlight group determines the highlighting.
-- 	Note that tabs after the showbreak will be displayed differently.
-- 	If you want the 'showbreak' to appear in between line numbers, add the
-- 	"n" flag to 'cpoptions'.
vim.o.showbreak = ""
-- boolean	(Vim default: on, Vi default: off)
-- 			global
-- 	Show (partial) command in the last line of the screen.  Set this
-- 	option off if your terminal is slow.
-- 	In Visual mode the size of the selected area is shown:
-- 	- When selecting characters within a line, the number of characters.
-- 	  If the number of bytes is different it is also displayed: "2-6"
-- 	  means two characters and six bytes.
-- 	- When selecting more than one line, the number of lines.
-- 	- When selecting a block, the size in screen characters:
-- 	  {lines}x{columns}.
vim.o.showcmd = "true"
-- boolean (default off)
-- 			global
-- 	When completing a word in insert mode (see |ins-completion|) from the
-- 	tags file, show both the tag name and a tidied-up form of the search
-- 	pattern (if there is one) as possible matches.  Thus, if you have
-- 	matched a C function, you can see a template for what arguments are
-- 	required (coding style permitting).
-- 	Note that this doesn't work well together with having "longest" in
-- 	'completeopt', because the completion from the search pattern may not
-- 	match the typed text.
vim.o.showfulltag = "false"
-- boolean	(default off)
-- 			global
-- 	When a bracket is inserted, briefly jump to the matching one.  The
-- 	jump is only done if the match can be seen on the screen.  The time to
-- 	show the match can be set with 'matchtime'.
-- 	A Beep is given if there is no match (no matter if the match can be
-- 	seen or not).
-- 	This option is reset when 'paste' is set and restored when 'paste' is
-- 	reset.
-- 	When the 'm' flag is not included in 'cpoptions', typing a character
-- 	will immediately move the cursor back to where it belongs.
-- 	See the "sm" field in 'guicursor' for setting the cursor shape and
-- 	blinking when showing the match.
-- 	The 'matchpairs' option can be used to specify the characters to show
-- 	matches for.  'rightleft' and 'revins' are used to look for opposite
-- 	matches.
-- 	Also see the matchparen plugin for highlighting the match when moving
-- 	around |pi_paren.txt|.
-- 	Note: Use of the short form is rated PG.
vim.o.showmatch = "false"
-- boolean	(Vim default: on, Vi default: off)
-- 			global
-- 	If in Insert, Replace or Visual mode put a message on the last line.
-- 	The |hl-ModeMsg| highlight group determines the highlighting.
vim.o.showmode = "true"
-- number	(default 1)
-- 			global
-- 	The value of this option specifies when the line with tab page labels
-- 	will be displayed:
-- 		0: never
-- 		1: only if there are at least two tab pages
-- 		2: always
-- 	This is both for the GUI and non-GUI implementation of the tab pages
-- 	line.
-- 	See |tab-page| for more information about tab pages.
vim.o.showtabline = "1"
-- string (default empty)
-- 			local to window
-- 	Settings for 'breakindent'. It can consist of the following optional
-- 	items and must be separated by a comma:
-- 		min:{n}	    Minimum text width that will be kept after
-- 			    applying 'breakindent', even if the resulting
-- 			    text should normally be narrower. This prevents
-- 			    text indented almost to the right window border
-- 			    occupying lot of vertical space when broken.
-- 		shift:{n}   After applying 'breakindent', the wrapped line's
-- 			    beginning will be shifted by the given number of
-- 			    characters.  It permits dynamic French paragraph
-- 			    indentation (negative) or emphasizing the line
-- 			    continuation (positive).
-- 		sbr	    Display the 'showbreak' value before applying the
-- 			    additional indent.
-- 	The default value for min is 20 and shift is 0.
vim.wo.breakindentopt = ""
